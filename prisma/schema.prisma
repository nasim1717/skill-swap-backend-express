generator client {
  provider = "prisma-client-js"
  // output   = "../generated/prisma"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model users {
  id              BigInt    @id @default(autoincrement()) @db.BigInt
  name            String?
  email           String    @unique
  password        String
  profile_picture String?
  bio             String?   @db.Text
  location        String?
  created_at      DateTime  @default(now())
  updated_at      DateTime? @updatedAt

  // relations
  skills_offered    skills_offered[]
  skills_wanted     skills_wanted[]
  sent_messages     messages[]       @relation("sent_messages")
  received_messages messages[]       @relation("received_messages")
  reviews_written   reviews[]        @relation("reviews_written")
  reviews_received  reviews[]        @relation("reviews_received")

  @@map("users")
}

model skills_offered {
  id         BigInt    @id @default(autoincrement()) @db.BigInt
  user_id    BigInt    @unique
  skills     String
  created_at DateTime  @default(now())
  updated_at DateTime? @updatedAt

  // relation fields
  user users @relation(fields: [user_id], references: [id], onDelete: Cascade)

  @@index([user_id])
  @@map("skills_offered")
}

model skills_wanted {
  id         BigInt    @id @default(autoincrement()) @db.BigInt
  user_id    BigInt    @unique
  skills     String
  created_at DateTime  @default(now())
  updated_at DateTime? @updatedAt

  // relation fields
  user users @relation(fields: [user_id], references: [id], onDelete: Cascade)

  @@index([user_id])
  @@map("skills_wanted")
}

model messages {
  id          BigInt    @id @default(autoincrement()) @db.BigInt
  sender_id   BigInt
  receiver_id BigInt
  message     String    @db.Text
  created_at  DateTime  @default(now())
  updated_at  DateTime? @updatedAt

  // relations
  sender   users @relation("sent_messages", fields: [sender_id], references: [id], onDelete: Cascade)
  receiver users @relation("received_messages", fields: [receiver_id], references: [id], onDelete: Cascade)

  @@index([sender_id])
  @@index([receiver_id])
  @@map("messages")
}

model reviews {
  id               BigInt    @id @default(autoincrement()) @db.BigInt
  reviewer_id      BigInt
  reviewed_user_id BigInt
  rating           Int       @db.TinyInt
  comment          String?   @db.Text
  created_at       DateTime  @default(now())
  updated_at       DateTime? @updatedAt

  // relations
  reviewer users @relation("reviews_written", fields: [reviewer_id], references: [id], onDelete: Cascade)
  reviewed users @relation("reviews_received", fields: [reviewed_user_id], references: [id], onDelete: Cascade)

  @@index([reviewer_id])
  @@index([reviewed_user_id])
  @@map("reviews")
}
